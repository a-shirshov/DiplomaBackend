basePath: /api
consumes:
- application/json
definitions:
  models.ErrorMessageBadRequest:
    properties:
      message:
        example: Bad request
        type: string
    type: object
  models.ErrorMessageInternalServer:
    properties:
      message:
        example: Server problems
        type: string
    type: object
  models.ErrorMessageUnauthorized:
    properties:
      message:
        example: User is not authorized
        type: string
    type: object
  models.ErrorMessageUnprocessableEntity:
    properties:
      message:
        example: Wrong Json Request
        type: string
    type: object
  models.Event:
    properties:
      about:
        type: string
      category:
        maxLength: 20
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      specialInfo:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - about
    - category
    - description
    - name
    type: object
  models.LoginUserRequest:
    properties:
      email:
        example: artyom@mail.ru
        type: string
      password:
        example: "12345678"
        type: string
    type: object
  models.Place:
    properties:
      about:
        type: string
      category:
        maxLength: 20
        type: string
      description:
        type: string
      id:
        type: integer
      img_url:
        type: string
      name:
        type: string
    required:
    - about
    - category
    - description
    - name
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        example: 4ffc5f18-99d8-47f6-8141-faf2c2f5a24e
        type: string
    type: object
  models.RegistrationUserRequest:
    properties:
      email:
        example: artyom@mail.ru
        type: string
      name:
        example: Artyom
        type: string
      password:
        example: "12345678"
        type: string
      surname:
        example: Shirshov
        type: string
    required:
    - name
    - surname
    type: object
  models.RegistrationUserResponse:
    properties:
      email:
        example: artyom@mail.ru
        type: string
      name:
        example: Artyom
        type: string
      surname:
        example: Shirshov
        type: string
    required:
    - name
    - surname
    type: object
  models.Tokens:
    properties:
      access_token:
        example: 22f37ea5-2d12-4309-afbe-17783b44e24f
        type: string
      refresh_token:
        example: 4ffc5f18-99d8-47f6-8141-faf2c2f5a24e
        type: string
    type: object
  models.UserProfile:
    properties:
      about:
        type: string
      email:
        example: artyom@mail.ru
        type: string
      imgUrl:
        type: string
      name:
        example: Artyom
        type: string
      surname:
        example: Shirshov
        type: string
    required:
    - name
    - surname
    type: object
  models.UserWithTokensResponse:
    properties:
      tokens:
        $ref: '#/definitions/models.Tokens'
      user:
        $ref: '#/definitions/models.UserProfile'
    type: object
host: 45.141.102.243:8080
info:
  contact: {}
  description: |-
    Documentation for Diploma Api
    For Authorization:
    Put Access token in ApiKey with Bearer. Example: "Bearer access_token"
  title: Diploma API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User credentials
        in: body
        name: inputCredentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessageUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Recieve new tokens
      parameters:
      - description: RefreshToken
        in: body
        name: RefreshToken
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tokens'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: Refresh
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: inputUser
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegistrationUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: Registration
      tags:
      - Auth
  /events/{id}:
    get:
      consumes:
      - application/json
      description: Get Event by id
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: One Event
      tags:
      - Events
  /places:
    get:
      consumes:
      - application/json
      description: GetPlaces by selected page
      parameters:
      - description: Page of events
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Place'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: PlacesList
      tags:
      - Places
  /places/{id}/events:
    get:
      consumes:
      - application/json
      description: GetEvents by selected page
      parameters:
      - description: Page of events
        in: query
        name: page
        type: integer
      - description: Place id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: EventsList
      tags:
      - Events
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Find a user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegistrationUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessageBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      summary: GetUser
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: newUserInformation
        required: true
        schema:
          $ref: '#/definitions/models.UserProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessageUnauthorized'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorMessageUnprocessableEntity'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessageInternalServer'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Users
produces:
- application/json
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
