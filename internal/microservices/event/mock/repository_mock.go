// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/event/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Diploma/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckKudaGoMeeting mocks base method.
func (m *MockRepository) CheckKudaGoMeeting(userID, eventID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckKudaGoMeeting", userID, eventID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckKudaGoMeeting indicates an expected call of CheckKudaGoMeeting.
func (mr *MockRepositoryMockRecorder) CheckKudaGoMeeting(userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckKudaGoMeeting", reflect.TypeOf((*MockRepository)(nil).CheckKudaGoMeeting), userID, eventID)
}

// CreateKudaGoEvent mocks base method.
func (m *MockRepository) CreateKudaGoEvent(placeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKudaGoEvent", placeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKudaGoEvent indicates an expected call of CreateKudaGoEvent.
func (mr *MockRepositoryMockRecorder) CreateKudaGoEvent(placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKudaGoEvent", reflect.TypeOf((*MockRepository)(nil).CreateKudaGoEvent), placeID)
}

// GetEvent mocks base method.
func (m *MockRepository) GetEvent(eventId int) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", eventId)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockRepositoryMockRecorder) GetEvent(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockRepository)(nil).GetEvent), eventId)
}

// GetEvents mocks base method.
func (m *MockRepository) GetEvents(page int) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", page)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockRepositoryMockRecorder) GetEvents(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockRepository)(nil).GetEvents), page)
}

// GetPeopleCount mocks base method.
func (m *MockRepository) GetPeopleCount(placeID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeopleCount", placeID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeopleCount indicates an expected call of GetPeopleCount.
func (mr *MockRepositoryMockRecorder) GetPeopleCount(placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeopleCount", reflect.TypeOf((*MockRepository)(nil).GetPeopleCount), placeID)
}

// SwitchEventMeeting mocks base method.
func (m *MockRepository) SwitchEventMeeting(userID, eventID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchEventMeeting", userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchEventMeeting indicates an expected call of SwitchEventMeeting.
func (mr *MockRepositoryMockRecorder) SwitchEventMeeting(userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchEventMeeting", reflect.TypeOf((*MockRepository)(nil).SwitchEventMeeting), userID, eventID)
}
