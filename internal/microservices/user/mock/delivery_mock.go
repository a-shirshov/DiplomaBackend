// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/user/delivery.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockDelivery) GetUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUser", c)
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDeliveryMockRecorder) GetUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDelivery)(nil).GetUser), c)
}

// UpdateUser mocks base method.
func (m *MockDelivery) UpdateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", c)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDeliveryMockRecorder) UpdateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDelivery)(nil).UpdateUser), c)
}

// UpdateUserImage mocks base method.
func (m *MockDelivery) UpdateUserImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserImage", c)
}

// UpdateUserImage indicates an expected call of UpdateUserImage.
func (mr *MockDeliveryMockRecorder) UpdateUserImage(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserImage", reflect.TypeOf((*MockDelivery)(nil).UpdateUserImage), c)
}
