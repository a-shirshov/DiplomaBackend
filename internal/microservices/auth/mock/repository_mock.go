// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/auth/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Diploma/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), userID)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), arg0)
}

// UpdatePassword mocks base method.
func (m *MockRepository) UpdatePassword(passwordHash, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", passwordHash, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMockRecorder) UpdatePassword(passwordHash, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), passwordHash, email)
}

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CheckAccessToNewPassword mocks base method.
func (m *MockSessionRepository) CheckAccessToNewPassword(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccessToNewPassword", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAccessToNewPassword indicates an expected call of CheckAccessToNewPassword.
func (mr *MockSessionRepositoryMockRecorder) CheckAccessToNewPassword(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccessToNewPassword", reflect.TypeOf((*MockSessionRepository)(nil).CheckAccessToNewPassword), email)
}

// CheckRedeemCode mocks base method.
func (m *MockSessionRepository) CheckRedeemCode(email string, redeemCode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRedeemCode", email, redeemCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRedeemCode indicates an expected call of CheckRedeemCode.
func (mr *MockSessionRepositoryMockRecorder) CheckRedeemCode(email, redeemCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRedeemCode", reflect.TypeOf((*MockSessionRepository)(nil).CheckRedeemCode), email, redeemCode)
}

// DeleteAuth mocks base method.
func (m *MockSessionRepository) DeleteAuth(accessUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuth", accessUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuth indicates an expected call of DeleteAuth.
func (mr *MockSessionRepositoryMockRecorder) DeleteAuth(accessUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuth", reflect.TypeOf((*MockSessionRepository)(nil).DeleteAuth), accessUuid)
}

// FetchAuth mocks base method.
func (m *MockSessionRepository) FetchAuth(accessUuid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuth", accessUuid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuth indicates an expected call of FetchAuth.
func (mr *MockSessionRepositoryMockRecorder) FetchAuth(accessUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuth", reflect.TypeOf((*MockSessionRepository)(nil).FetchAuth), accessUuid)
}

// SavePasswordRedeemCode mocks base method.
func (m *MockSessionRepository) SavePasswordRedeemCode(email string, redeemCode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePasswordRedeemCode", email, redeemCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePasswordRedeemCode indicates an expected call of SavePasswordRedeemCode.
func (mr *MockSessionRepositoryMockRecorder) SavePasswordRedeemCode(email, redeemCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePasswordRedeemCode", reflect.TypeOf((*MockSessionRepository)(nil).SavePasswordRedeemCode), email, redeemCode)
}

// SaveTokens mocks base method.
func (m *MockSessionRepository) SaveTokens(userId int, td *models.TokenDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTokens", userId, td)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTokens indicates an expected call of SaveTokens.
func (mr *MockSessionRepositoryMockRecorder) SaveTokens(userId, td interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTokens", reflect.TypeOf((*MockSessionRepository)(nil).SaveTokens), userId, td)
}
