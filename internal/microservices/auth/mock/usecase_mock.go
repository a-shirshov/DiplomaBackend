// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/auth/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Diploma/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CheckRedeemCode mocks base method.
func (m *MockUsecase) CheckRedeemCode(rdc *models.RedeemCodeStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRedeemCode", rdc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRedeemCode indicates an expected call of CheckRedeemCode.
func (mr *MockUsecaseMockRecorder) CheckRedeemCode(rdc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRedeemCode", reflect.TypeOf((*MockUsecase)(nil).CheckRedeemCode), rdc)
}

// CreateAndSavePasswordRedeemCode mocks base method.
func (m *MockUsecase) CreateAndSavePasswordRedeemCode(email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndSavePasswordRedeemCode", email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndSavePasswordRedeemCode indicates an expected call of CreateAndSavePasswordRedeemCode.
func (mr *MockUsecaseMockRecorder) CreateAndSavePasswordRedeemCode(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndSavePasswordRedeemCode", reflect.TypeOf((*MockUsecase)(nil).CreateAndSavePasswordRedeemCode), email)
}

// CreateUser mocks base method.
func (m *MockUsecase) CreateUser(arg0 *models.User) (*models.User, *models.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.TokenDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecase)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockUsecase) DeleteUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsecaseMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsecase)(nil).DeleteUser), userID)
}

// FindUserByEmail mocks base method.
func (m *MockUsecase) FindUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUsecaseMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUsecase)(nil).FindUserByEmail), email)
}

// Logout mocks base method.
func (m *MockUsecase) Logout(arg0 *models.AccessDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUsecaseMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUsecase)(nil).Logout), arg0)
}

// Refresh mocks base method.
func (m *MockUsecase) Refresh(arg0 string) (*models.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(*models.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockUsecaseMockRecorder) Refresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockUsecase)(nil).Refresh), arg0)
}

// SignIn mocks base method.
func (m *MockUsecase) SignIn(arg0 *models.LoginUser) (*models.User, *models.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.TokenDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsecaseMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsecase)(nil).SignIn), arg0)
}

// UpdatePassword mocks base method.
func (m *MockUsecase) UpdatePassword(rdc *models.RedeemCodeStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", rdc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUsecaseMockRecorder) UpdatePassword(rdc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUsecase)(nil).UpdatePassword), rdc)
}
