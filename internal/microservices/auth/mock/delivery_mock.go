// Code generated by MockGen. DO NOT EDIT.
// Source: internal/microservices/auth/delivery.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// CheckRedeemCode mocks base method.
func (m *MockDelivery) CheckRedeemCode(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckRedeemCode", c)
}

// CheckRedeemCode indicates an expected call of CheckRedeemCode.
func (mr *MockDeliveryMockRecorder) CheckRedeemCode(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRedeemCode", reflect.TypeOf((*MockDelivery)(nil).CheckRedeemCode), c)
}

// DeleteUser mocks base method.
func (m *MockDelivery) DeleteUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", c)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDeliveryMockRecorder) DeleteUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDelivery)(nil).DeleteUser), c)
}

// Logout mocks base method.
func (m *MockDelivery) Logout(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", c)
}

// Logout indicates an expected call of Logout.
func (mr *MockDeliveryMockRecorder) Logout(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockDelivery)(nil).Logout), c)
}

// Refresh mocks base method.
func (m *MockDelivery) Refresh(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", c)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockDeliveryMockRecorder) Refresh(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockDelivery)(nil).Refresh), c)
}

// SendEmail mocks base method.
func (m *MockDelivery) SendEmail(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEmail", c)
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockDeliveryMockRecorder) SendEmail(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockDelivery)(nil).SendEmail), c)
}

// SignIn mocks base method.
func (m *MockDelivery) SignIn(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignIn", c)
}

// SignIn indicates an expected call of SignIn.
func (mr *MockDeliveryMockRecorder) SignIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockDelivery)(nil).SignIn), c)
}

// SignUp mocks base method.
func (m *MockDelivery) SignUp(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", c)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockDeliveryMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockDelivery)(nil).SignUp), c)
}

// UpdatePassword mocks base method.
func (m *MockDelivery) UpdatePassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePassword", c)
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockDeliveryMockRecorder) UpdatePassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockDelivery)(nil).UpdatePassword), c)
}
