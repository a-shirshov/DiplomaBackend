// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/myproto.proto

package myproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyProtoClient is the client API for MyProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyProtoClient interface {
	ReturnVector(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*VectorReply, error)
}

type myProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewMyProtoClient(cc grpc.ClientConnInterface) MyProtoClient {
	return &myProtoClient{cc}
}

func (c *myProtoClient) ReturnVector(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*VectorReply, error) {
	out := new(VectorReply)
	err := c.cc.Invoke(ctx, "/myproto.MyProto/ReturnVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyProtoServer is the server API for MyProto service.
// All implementations must embed UnimplementedMyProtoServer
// for forward compatibility
type MyProtoServer interface {
	ReturnVector(context.Context, *StringRequest) (*VectorReply, error)
	mustEmbedUnimplementedMyProtoServer()
}

// UnimplementedMyProtoServer must be embedded to have forward compatible implementations.
type UnimplementedMyProtoServer struct {
}

func (UnimplementedMyProtoServer) ReturnVector(context.Context, *StringRequest) (*VectorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnVector not implemented")
}
func (UnimplementedMyProtoServer) mustEmbedUnimplementedMyProtoServer() {}

// UnsafeMyProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyProtoServer will
// result in compilation errors.
type UnsafeMyProtoServer interface {
	mustEmbedUnimplementedMyProtoServer()
}

func RegisterMyProtoServer(s grpc.ServiceRegistrar, srv MyProtoServer) {
	s.RegisterService(&MyProto_ServiceDesc, srv)
}

func _MyProto_ReturnVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyProtoServer).ReturnVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myproto.MyProto/ReturnVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyProtoServer).ReturnVector(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyProto_ServiceDesc is the grpc.ServiceDesc for MyProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myproto.MyProto",
	HandlerType: (*MyProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnVector",
			Handler:    _MyProto_ReturnVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/myproto.proto",
}
